<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="qna">	
	<insert id="insertQna" parameterType="com.sp.customer.qna.Qna">
		INSERT INTO qna(num, categoryNum, questionPrivate, subject, content, id, parent, created)
		VALUES(NEXTVAL(qna_seq), #{categoryNum}, #{questionPrivate}, #{subject}, #{content}, #{id}, COALESCE(parent), NOW())
	</insert>
	
	<sql id="where-list">
		<if test="condition == 'all'">
			(INSTR(q.subject, #{keyword}) &gt; 0
				OR INSTR(q.content, #{keyword}) &gt; 0)
		</if>
		<if test="condition == 'subject'">
			INSTR(q.subject, #{keyword}) &gt; 0
		</if>
		<if test="condition == 'content'">
			INSTR(q.content, #{keyword}) &gt; 0
		</if>
		<if test="condition == 'name'">
			userName=#{keyword}
		</if>
		<if test="condition == 'created'">
			( TO_CHAR(q.created, 'YYYY-MM-DD') = #{keyword}
				OR TO_CHAR(q.created, 'YYYYMMDD') = #{keyword} )
	   </if>
	</sql>
	
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT IFNULL(COUNT(*), 0)
		FROM qna q
		JOIN member m ON q.id = m.id
		<where>
			q.parent IS NOT NULL
			<if test="keyword != null and keyword != ''">
				AND <include refid="where-list"/>
			</if>
		</where>
	</select>
	
	<select id="listQna" parameterType="map" resultType="com.sp.customer.qna.Qna">
		SELECT q.num, name, q.id, q.subject, q.questionPrivate, q.parent, CASE WHEN q2.parent IS NULL THEN 0 ELSE 1 END AS isAnswer, q.created, q.categoryNum, category
		FROM qna q
		LEFT OUTER JOIN qna q2 ON q.num = q2.parent
		JOIN member m ON q.id = m.id
		JOIN qnaCategory qc ON q.categoryNum = qc.categoryNum
		<where>
			q.parent IS NOT NULL
			<if test="keyword != null and keyword != ''">
				AND <include refid="where-list"/>
			</if>
		</where>
		ORDER BY num DESC
		LIMIT #{rows} OFFSET #{offset}
	</select>
	
	<select id="readQna" parameterType="Integer" resultType="com.sp.customer.qna.Qna">
		SELECT num, q.id, name, subject, content, parent, created, questionPrivate, q.categoryNum, category
		FROM qna q
		JOIN qnaCategory qc ON q.categoryNum = qc.categoryNum
		JOIN member m ON q.id = m.id
		WHERE num = #{num}
	</select>
	
	<select id="readAnswer" parameterType="Integer" resultType="com.sp.customer.qna.Qna">
		SELECT q.num, q.id, name, q.subject, q.content, q.parent, q.created, q.questionPrivate, q.categoryNum, category
		FROM qna q
		JOIN qnaCategory qc ON q.categoryNum = qc.categoryNum
		JOIN member m ON q.id = m.id
		WHERE parent = #{num}
	</select>
	
	<select id="preReadQuestion" parameterType="map" resultType="com.sp.customer.qna.Qna">
		SELECT q.num, q.subject, q.questionPrivate
		FROM qna q
		JOIN member m ON q.id = m.id
		<where>
			q.parent IS NOT NULL
			<if test="keyword != null and keyword != ''">
				AND <include refid="where-list"/>
			</if>
			AND (q.num &gt; #{num})
		</where>
		ORDER BY num ASC
		LIMIT 1
	</select>
	
	<select id="nextReadQuestion" parameterType="map" resultType="com.sp.customer.qna.Qna">
		SELECT q.num, q.subject, q.questionPrivate
		FROM qna q
		JOIN member m ON q.id = m.id
		<where>
			q.parent IS NOT NULL
			<if test="keyword != null and keyword != ''">
				AND <include refid="where-list"/>
			</if>
			AND (q.num &lt; #{num})
		</where>
		ORDER BY num DESC
		LIMIT 1
	</select>

	<update id="updateQna" parameterType="com.sp.customer.qna.Qna">
		UPDATE qna SET subject = #{subject}, content = #{content}, categoryNum = #{categoryNum}, questionPrivate = #{questionPrivate}
		WHERE num = #{num} AND id = #{id}
	</update>
	
	<delete id="deleteQna" parameterType="Integer">
		DELETE FROM qna WHERE num IN(

			WITH RECURSIVE cte AS (
			SELECT num, parent, 1 lvl FROM qna
			WHERE num = #{num}
			
			UNION ALL
			
			SELECT q.num, q.parent, lvl + 1 lvl FROM qna q
			INNER JOIN cte c
			ON q.parent = c.num)
			
			SELECT num FROM cte
		);
	</delete>

	<delete id="deleteAnswer" parameterType="Integer">
		DELETE FROM qna WHERE num = #{num}
	</delete>
	
	<insert id="insertCategory" parameterType="com.sp.customer.qna.Qna">
		INSERT INTO qnaCategory(categoryNum, category)
		VALUES(NEXTVAL(qnaCategory_seq), #{category})
	</insert>
	
	<update id="updateCategory" parameterType="com.sp.customer.qna.Qna">
		UPDATE qnaCategory SET category = #{category}
		WHERE categoryNum = #{categoryNum}
	</update>
	
	<select id="listCategory" resultType="com.sp.customer.qna.Qna">
		SELECT categoryNum, category FROM qnaCategory
	</select>
	
	<delete id="deleteCategory" parameterType="Integer">
		DELETE FROM qnaCategory WHERE categoryNum = #{categoryNum}
	</delete>	
</mapper>